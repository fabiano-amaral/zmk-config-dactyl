#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

// #include "includes/home_row.dtsi"
#define DEFAULT 0
#define LWR 1
#define RSE 2
#define FUN 3
#define ADJ 4
#define xxx &none
#define ___ &trans
#define BTSEL &bt BT_SEL
#define COMBO(name, kp, pos) \
combo_##name {               \
    timeout-ms    = <30>;    \
    bindings      = <kp>;    \
    key-positions = <pos>;   \
    layers        = <0 1>;   \
};

&mt {
    tapping-term-ms = <400>;
    quick-tap-ms = <100>;
};

/{
    combos {
        compatible = "zmk,combos";
        COMBO(caps_word, &caps_word, 7 8)
        // Combos específicos para macOS
        COMBO(copy, &kp LG(C), 26 27)        // C+V para Cmd+C (macOS)
        COMBO(paste, &kp LG(V), 27 28)       // V+B para Cmd+V (macOS)
        COMBO(undo, &kp LG(Z), 25 26)        // Z+X para Cmd+Z (macOS)
        COMBO(save, &kp LG(S), 13 14)        // S+D para Cmd+S (macOS)
        COMBO(find, &kp LG(F), 15 16)        // F+G para Cmd+F (macOS)
        COMBO(alt_tab, &kp LG(TAB), 1 2)     // Q+W para Cmd+Tab (macOS)
        COMBO(spotlight, &kp LG(SPACE), 2 3) // W+E para Cmd+Space (Spotlight)
        COMBO(mission_control, &kp LC(UP), 17 18) // J+K para Mission Control
        // Brackets e símbolos comuns
        COMBO(parens, &kp LPAR, 8 9)         // I+O para (
        COMBO(braces, &kp LBRC, 9 10)        // O+P para {
        COMBO(brackets, &kp LBKT, 21 22)     // ,+. para [
        COMBO(quotes, &kp DQT, 22 23)        // .+/ para "
        COMBO(comment, &td_comment, 23 11)   // /+\ para comentário inteligente
        // Combos específicos para macOS e desenvolvimento
        COMBO(new_tab, &kp LG(T), 4 5)       // R+T para Cmd+T (nova aba)
        COMBO(close_tab, &kp LG(W), 3 4)     // E+R para Cmd+W (fechar aba)
        COMBO(reload, &kp LG(R), 5 6)        // T+Y para Cmd+R (reload)
        COMBO(dev_tools, &kp LG(LA(I)), 6 7) // Y+U para Cmd+Opt+I (DevTools)
        COMBO(escape, &kp ESC, 0 12)         // Tab+Esc para ESC rápido
    };
    behaviors {
        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
        
        // Macro para comentários de linha dupla
        td_comment: tap_dance_comment {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp FSLH>, <&macro_comment>;
        };
        
        // Macro para operadores de comparação
        td_equal: tap_dance_equal {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp EQUAL>, <&macro_equal_equal>;
        };
    };
    
    macros {
        macro_comment: macro_comment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp FSLH &kp FSLH &kp SPACE>;
        };
        
        macro_equal_equal: macro_equal_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp EQUAL>;
        };
        
        macro_not_equal: macro_not_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EXCL &kp EQUAL>;
        };
        
        macro_arrow: macro_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
        };
        
        // Macros específicos para macOS/desenvolvimento
        macro_cmd_opt_left: macro_cmd_opt_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LEFT))>;
        };
        
        macro_cmd_opt_right: macro_cmd_opt_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(RIGHT))>;
        };
        
        macro_screenshot: macro_screenshot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LS(N4))>;
        };
    };
    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
                        &kp TAB     &kp Q           &kp W           &kp E           &kp R           &kp T                            &kp Y       &kp U           &kp I           &kp O           &kp P               &kp MINUS
                        &kp ESCAPE  &bhm LALT A     &bhm LCTRL S     &bhm LSHFT D    &bhm LGUI F    &kp G                            &kp H       &bhm LGUI J    &bhm LSHIFT K   &bhm LCTRL L     &bhm LALT SEMI      &kp SQT
                        &caps_word  &kp Z           &kp X           &kp C           &kp V           &kp B                            &kp N       &kp M           &kp COMMA       &kp DOT         &kp FSLH            &kp BSLH
                                                    &kp C_PREV      &kp C_NEXT      &lt RSE SPACE   &kp ENTER                        &kp RGUI    &lt RSE BSPC    &mo FUN         &kp C_VOL_UP
                                                                    &mo LWR         ___             ___                              ___         ___             &lt LWR RETURN
            >;
        };

        lower_layer {
            bindings = <
                        &macro_screenshot &kp N1    &kp N2          &kp N3          &kp N4          &kp N5                              &kp N6      &kp N7      &kp N8              &kp N9          &kp N0      &kp BSPC
                        ___         &kp TILDE   &kp MINUS       &kp CARET       &td_equal       &kp LG(TAB)                         &kp LEFT    &kp DOWN    &kp UP              &kp RIGHT       &kp COLON   &kp DQT
                        ___         &kp GRAVE   &kp UNDER       &kp PLUS        &macro_not_equal &macro_arrow                       &macro_cmd_opt_left &kp END &kp PAGE_DOWN   &kp PG_UP       &macro_cmd_opt_right &kp PIPE
                                    ___         ___             ___             ___             ___                                 ___         ___         ___
                                                                ___             &mo RSE         ___                                 ___         ___         &mo RSE
            >;
        };

        raise_layer {
            bindings = <
                        ___     &kp EXCL    &kp AT      &kp HASH    &kp DLLR    &kp PRCNT                               &kp CARET   &kp AMPS        &kp ASTRK           &kp LPAR        &kp RPAR    &kp DEL
                        ___     ___         ___         ___         ___         ___                                     &kp QMARK   &kp LPAR        &kp RPAR            &kp LBKT        &kp RBKT    ___
                        ___     ___         ___         ___         ___         ___                                     &kp LT      &kp LEFT_BRACKET &kp RIGHT_BRACKET  &kp LBRC        &kp RBRC    &kp GT
                                            ___         ___         ___         ___                                     ___         ___             ___                 ___
                                                        ___         ___         ___                                     ___         ___             ___
            >;
        };
        
        function_layer {
            bindings = <
                        &kp F12     &kp F1      &kp F2      &kp F3      &kp F4      &kp F5                              &kp F6      &kp F7          &kp F8          &kp F9          &kp F10     &kp F11
                        ___         ___         ___         ___         ___         ___                                 &kp C_PREV  &kp C_VOL_DN    &kp C_VOL_UP    &kp C_NEXT      &kp C_PP    ___
                        ___         ___         ___         ___         ___         ___                                 &kp C_BRI_DN &kp C_BRI_UP   &kp C_MUTE      &kp LG(LS(N3))  &kp LG(LS(N4)) ___
                                                ___         ___         ___         ___                                 ___         ___             ___             ___
                                                            ___         ___         ___                                 ___         ___             ___
            >;
        };
        
        adjust_layer {
            bindings = <
                        &bt BT_CLR_ALL  BTSEL 0 BTSEL 1  BTSEL 2   BTSEL 3   BTSEL 4                    &trans  &trans  &trans  &trans  &trans  &trans
                        &out OUT_BLE    &kp J   ___   ___    ___    &bootloader                         ___     ___     ___     ___     ___     ___
                        &out OUT_USB    ___     ___   ___    ___    ___                                 ___     ___     ___     ___     ___     ___
                                                ___   ___    ___    ___                                 ___     ___     ___     ___
                                                      ___    ___    ___                                 ___     ___     ___
            >;
        };

    };
    conditional_layers {
        compatible = "zmk,conditional-layers";

        adjust {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };
};
