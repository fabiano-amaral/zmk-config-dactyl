#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

// #include "includes/home_row.dtsi"
#define XXX &none
#define ___ &trans
#define DEFAULT 0
#define LWR 1
#define RSE 2
#define COMBO(name, kp, pos) \
combo_##name {               \
    timeout-ms    = <30>;    \
    bindings      = <kp>;    \
    key-positions = <pos>;   \
    layers        = <0 1>;   \
};

&mt {
    tapping-term-ms = <400>;
    quick-tap-ms = <100>;
};

/ {
    combos {
        compatible = "zmk,combos";
        COMBO(caps_word, &caps_word, 19 20)
    };
    behaviors {
        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;    // <---[[moderate duration]]
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                        &kp TAB     &kp Q            &kp W            &kp E              &kp R                &kp T        &kp Y     &kp U         &kp I          &kp O            &kp P                &kp MINUS
                        &kp ESCAPE  &bhm LEFT_ALT A  &bhm LEFT_GUI S  &bhm LEFT_SHIFT D  &bhm LEFT_CONTROL F  &kp G        &kp H     &bhm LCTRL J  &bhm LSHIFT K  &bhm LEFT_GUI L  &bhm LALT SEMICOLON  &kp SQT
                        &caps_word  &kp Z            &kp X            &kp C              &kp V                &kp B        &kp N     &kp M         &kp COMMA      &kp DOT          &kp FSLH             &kp BSLH
                                                     &kp LBKT         &kp RBKT           &kp SPACE            &kp ENTER    &kp RGUI  &kp BSPC      &kp PLUS       &kp EQUAL
                                                                      &mo 1              &kp LALT             &mo 2        &mo 2     &mo 1         &lt 2 RETURN
            >;
        };

        lower_layer {
            bindings = <
                        &kp GRAVE  &kp N1     &kp N2      &kp N3       &kp N4        &kp N5         &kp N6    &kp N7    &kp N8         &kp N9      &kp N0  &kp PRINTSCREEN
                        ___     &kp TILDE  &kp MINUS   &kp PLUS     &kp KP_EQUAL  &kp LA(TAB)    &kp LEFT  &kp DOWN  &kp UP         &kp RIGHT   ___  ___
                        ___     ___     ___      ___       ___        ___         &kp HOME  &kp END   &kp PAGE_DOWN  &kp PG_UP   ___  ___
                                              ___      ___       ___        ___         ___    ___    ___         ___
                                                          ___       &mo RSE       ___         ___    ___    ___
            >;
        };

        raise_layer {
            bindings = <
                        ___  ___  ___    ___        ___        ___          &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp EXCLAMATION  &kp     &kp     &kp
                        ___  ___  ___    ___        ___        ___          &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp QMARK        &kp     &kp     &kp
                        ___  ___  ___    ___        ___        ___          &kp LEFT_BRACKET      &kp RIGHT_BRACKET      ___           ___  ___  ___
                                        ___    ___        ___        ___          ___                ___                 ___           ___
                                                                ___        ___          ___                ___                 ___           ___
            >;
        };
        adjust_layer {
            bindings = <
                        &bt BT_CLR_ALL  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    ___  ___  ___  ___  ___  ___
                        &out OUT_BLE    &kp J        ___        ___        ___         &bootloader     ___  ___  ___  ___  ___  ___
                        &out OUT_USB    ___        ___        ___        ___        ___          ___  ___  ___  ___  ___  ___
                                                      ___        ___        ___        ___          ___  ___  ___  ___
                                                                    ___        ___        ___          ___  ___  ___
            >;
        };

    };
    conditional_layers {
        compatible = "zmk,conditional-layers";

        adjust {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
