#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

// #include "includes/home_row.dtsi"
#define DEFAULT 0
#define LWR 1
#define RSE 2
#define xxx &none
#define ___ &trans
#define BTSEL &bt BT_SEL
#define COMBO(name, kp, pos) \
combo_##name {               \
    timeout-ms    = <30>;    \
    bindings      = <kp>;    \
    key-positions = <pos>;   \
    layers        = <0 1>;   \
};

&mt {
    tapping-term-ms = <400>;
    quick-tap-ms = <100>;
};

/{
    combos {
        compatible = "zmk,combos";
        COMBO(caps_word, &caps_word, 7 8)
    };
    behaviors {
        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };
    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
                        &kp TAB     &kp Q           &kp W           &kp E           &kp R           &kp T                            &kp Y       &kp U           &kp I           &kp O           &kp P               &kp MINUS
                        &kp ESCAPE  &bhm LALT A     &bhm LCTRL S     &bhm LSHFT D    &bhm LGUI F    &kp G                            &kp H       &bhm LGUI J    &bhm LSHIFT K   &bhm LCTRL L     &bhm LALT SEMI      &kp SQT
                        &caps_word  &kp Z           &kp X           &kp C           &kp V           &kp B                            &kp N       &kp M           &kp COMMA       &kp DOT         &kp FSLH            &kp BSLH
                                                    &kp C_PREV      &kp C_NEXT      &lt RSE SPACE   &kp ENTER                        &kp RGUI    &lt RSE BSPC    &kp C_VOL_DN    &kp C_VOL_UP
                                                                    &mo LWR         ___             ___                              ___         ___             &lt LWR RETURN
            >;
        };

        lower_layer {
            bindings = <
                        &kp PSCRN   &kp N1      &kp N2          &kp N3          &kp N4          &kp N5                              &kp N6      &kp N7      &kp N8              &kp N9          &kp N0      &kp BSPC
                        ___         &kp TILDE   &kp MINUS       &kp CARET       &kp EQUAL       &kp LG(TAB)                         &kp LEFT    &kp DOWN    &kp UP              &kp RIGHT       ___          ___
                        ___         &kp GRAVE   &kp UNDER       &kp PLUS        ___             ___                                 &kp HOME    &kp END     &kp PAGE_DOWN       &kp PG_UP       ___          ___
                                    ___         ___             ___             ___             ___                                 ___         ___         ___
                                                                ___             &mo RSE         ___                                 ___         ___         ___
            >;
        };

        raise_layer {
            bindings = <
                        ___     ___      ___      ___      ___      ___                                   &kp EXCL    &kp LEFT_BRACE      &kp RIGHT_BRACE        ___         ___      ___
                        ___     ___      ___      ___      ___      ___                                   &kp QMARK   &kp LPAR            &kp RPAR               ___         ___      ___
                        ___     ___      ___      ___      ___      ___                                   ___         &kp LEFT_BRACKET    &kp RIGHT_BRACKET      ___         ___      ___
                                         ___      ___      ___      ___                                   ___         ___                 ___                    ___
                                                  ___      ___      ___                                   ___         ___                 ___
            >;
        };
        adjust_layer {
            bindings = <
                        &bt BT_CLR_ALL  BTSEL 0 BTSEL 1  BTSEL 2   BTSEL 3   BTSEL 4                    &trans  &trans  &trans  &trans  &trans  &trans
                        &out OUT_BLE    &kp J   ___   ___    ___    &bootloader                         ___     ___     ___     ___     ___     ___
                        &out OUT_USB    ___     ___   ___    ___    ___                                 ___     ___     ___     ___     ___     ___
                                                ___   ___    ___    ___                                 ___     ___     ___     ___
                                                      ___    ___    ___                                 ___     ___     ___
            >;
        };

    };
    conditional_layers {
        compatible = "zmk,conditional-layers";

        adjust {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
